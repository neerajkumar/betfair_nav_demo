{
  "author": {
    "name": "Michael Garvin",
    "email": "gar@comrade.us"
  },
  "contributors": [
    {
      "name": "Henrik Joreteg",
      "email": "henrik@andyet.net"
    }
  ],
  "name": "moonboots_hapi",
  "description": "Moonboots plugin that allows it to serve files using a hapi server",
  "version": "2.4.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/wraithgar/moonboots_hapi"
  },
  "bugs": {
    "url": "https://github.com/wraithgar/moonboots_hapi/issues",
    "email": "gar@comrade.us"
  },
  "main": "index.js",
  "dependencies": {
    "async": "^0.7.0",
    "moonboots": "^2.0.6"
  },
  "devDependencies": {
    "complexity-report": "^1.0.0",
    "hapi": "^6.0.0",
    "jade": "^1.4.2",
    "lab": "^3.2.1",
    "precommit-hook": "^0.3.10"
  },
  "scripts": {
    "test": "make test",
    "start": "node server.js"
  },
  "license": "MIT",
  "readme": "# moonboots-hapi\n====\n\n[![NPM](https://nodei.co/npm/moonboots_hapi.png)](https://nodei.co/npm/moonboots_hapi/)\n\nMoonboots plugin that allows it to serve files using a hapi server.\nBe sure to use at least hapi 2.0 (won't work on 1.0, see legacy branch for 1.0)\n\n## How to use:\n\nExactly like moonboots, but with routing info.  The moonboots-specific\nconfig is put in a `moonboots` subconfig.  Also there is no longer any\nneed to pass in a server parameter.\n\n```js\nvar Hapi = require('hapi');\n\nvar config = {\n    appPath: '/myapp/{clientPath*}',\n    moonboots: {\n        main: __dirname + '/sample/app/app.js',\n        developmentMode: false,\n        libraries: [\n            __dirname + '/sample/libraries/jquery.js'\n        ],\n        stylesheets: [\n            __dirname + '/styles.css'\n        ]\n    }\n};\n\nvar server = new Hapi.Server();\n\nserver.pack.require({moonboots_hapi: config}, function (er) {\n    server.start();\n});\n```\n\n## Additional options\n\nYou can disable specific routes (all are enabled by default) using the\n`routes` config\n\nThis example would tell moonboots-hapi not to add the route for the html\napp to hapi.  You can do the same with `js` for the js route and `css`\nfor the css route.\n\n```js\nvar options = {\n    routes: {html: false}\n};\n\n\nYou can specify labels for your your routes, simply pass them in as a\nconfig item (see Hapi documentation for plugin.select for more\ninformation on labels)\n\n```js\nvar options = {\n    appPath = '/app',\n    labels: ['foo'],\n    moonboots: {/* ... */}\n};\n```\n\nYou can also configure each of the three routes (app, js, and css) as\nmuch you want. Simply pass in anything that would go in the `config` of\na Hapi route for that particular route.\n\n```js\nvar config = {\n    appPath: '/app',\n    appConfig: {\n        //Anything here will go into the config for the app route\n    },\n    jsConfig: {\n        //Anything here will go into the config for the js route\n    },\n    cssConfig: {\n        //Anything here will go into the config for the css route\n    },\n    moonboots: {/* moonboots config*/}\n};\n```\n\nThe app by default will serve on all requests unless you pass in an\n_appPath_ option\n\njs and css paths will default to _appPath_ if it is defined, and will\ndefault to _app.js_ and _app.css_ respectively otherwise.\n\n```js\nvar Hapi = require('hapi');\nvar HapiSession = require('hapi-session');\n\nvar config = {\n    appPath: '/app',\n    appConfig: {\n        auth: 'session',\n    }\n    moonboots: {\n        main: __dirname + '/sample/app/app.js',\n        developmentMode: false,\n        libraries: [\n            __dirname + '/sample/libraries/jquery.js'\n        ],\n        stylesheets: [\n            __dirname + '/styles.css'\n        ]\n    }\n};\n\nvar server = new Hapi.Server();\nserver.route({\n    method: 'get',\n    path: '/',\n    handler: function (request, reply) {\n        reply().redirect('/app');\n    }\n});\nserver.auth('session', {\n    implementation: new HapiSession(server, session_options)\n});\n\nserver.pack.require({moonboots_hapi: config}, function (err) {\n    server.start();\n});\n```\n\n\n## Templated app\n\nBy default moonboots serves up an app html of just a script and css tag\nlinking to the js and css source. You can override this by passing an\n``appTemplate`` option.  This string will be passed to the view handler\nin hapi, and given the following context:\n\n```\n{\n    jsFileName: '/link/to/app.js',\n    cssFileName: '/link/to/app.css'\n}\n```\n\n## Multiple mooonboots on one server\n\nYou can register multiple moonboots apps for a single hapi server like\nso:\n\n1. Pass in an array of moonboots configs instead of a single config.\n2. Make sure that each config provides unique `appPath` or hapi will\n   complain that the paths conflict.\n\nExample of registering multiple apps:\n\n```js\nserver.pack.require({moonboots_hapi: [moonboots_config1, moonboots_config2]}, function (er) {\n    server.start();\n});\n```\n\n## Helpers\n\nThere are currently two methods exposed from the plugin\n\n```js\nserver.plugins['moonboots_hapi'].clientConfig(0, function (config) {\n    console.log(config); //Will be the first client config\n});\nserver.plugins['moonboots_hapi'].clientApp(0, function (clientApp) {\n    console.log(clientApp); //Will be the first moonboots app\n});\n```\n\n## Test\n\nRun `npm test`\n\n## Sample\n\nRun `npm start` and make sure you have a grey (#ccc) background and the\n\"Woo! View source to see what rendered me\" message in your window.\n\n#License\n\nMIT\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/wraithgar/moonboots_hapi",
  "_id": "moonboots_hapi@2.4.0",
  "_from": "moonboots_hapi@^2.4.0"
}
